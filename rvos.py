# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rvos.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtWidgets
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QLabel, QPushButton, QRadioButton, QMenuBar, QMenu, QMainWindow, QFileDialog


class Ui_RvosWindow(QMainWindow):
    def see_film(self):
        os.system('python videowindow.py')

    def choose_model(self):
        model_path, _ = QFileDialog.getOpenFileName(self, 'Choose a model file', '', 'Model files | *.pth;')
        url = QUrl.fromLocalFile(model_path)
        print("Selected model: ", url.fileName())
        model_name = os.path.basename(model_path)
        self.modelpath_label.setText('Model: ' + model_name)
        self.model_path = model_path
        self.model_name = model_name
        return model_path

    def upload_frames(self):
        frames_path = QFileDialog.getExistingDirectory(self, 'Choose an input folder')
        url_input = QUrl.fromLocalFile(frames_path)
        print("Selected frames: ", url_input.fileName())
        self.frames_label.setText("Frames: " + os.path.basename(frames_path))
        self.start_segmentation.setDisabled(False)
        return frames_path

    def upload_init_mask(self):
        mask_path, _ = QFileDialog.getOpenFileName(self, 'Choose an init mask file', '', 'Image files | (*.jpg *.png);')
        url = QUrl.fromLocalFile(mask_path)
        print("Selected initial mask: ", url.fileName())
        self.mask_path_label.setText('Initial mask: ' + os.path.basename(mask_path))
        self.mask_path = mask_path
        self.mask_path_label.show()
        return mask_path

    def choose_video(self):
        video_path, _ = QFileDialog.getOpenFileName(self, 'Choose a video file', '', 'Video files | *.avi;')
        url = QUrl.fromLocalFile(video_path)
        print("Selected video: ", url.fileName())
        self.videopath_label.setText('Video: ' + video_path)
        self.video_path = "125_16s.avi"
        self.video_output = "125_16s_output.avi"
        return video_path

    def radio_zeroshot_clicked(self):
        self.mask_path_label.hide()
        self.init_mask_button.hide()

    def radio_oneshot_clicked(self):
        self.mask_path_label.show()
        self.init_mask_button.show()

    def setupUi(self, RvosWindow):
        self.model_path = ""
        self.video_path = ""
        self.video_output = ""
        self.model_name = ""

        RvosWindow.setObjectName("RvosWindow")
        RvosWindow.resize(600, 400)
        RvosWindow.setMinimumSize(600, 400)
        RvosWindow.setMaximumSize(600, 400)
        RvosWindow.setWindowTitle("RVOS segmentation")
        RvosWindow.setWindowIcon(QIcon('ivf.png'))

        self.centralwidget = QtWidgets.QWidget(RvosWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Upload model
        self.upload_model_button = QPushButton("Upload model", self.centralwidget)
        self.upload_model_button.setGeometry(0, 30, 250, 41)
        self.upload_model_button.setObjectName("upload_model")
        self.upload_model_button.clicked.connect(self.choose_model)
        self.modelpath_label = QLabel("Model: ", self.centralwidget)
        self.modelpath_label.setWordWrap(True)
        self.modelpath_label.setGeometry(250, 30, 500, 41)
        self.modelpath_label.setObjectName("upload_model_label")

        # Upload fames
        self.frames_button = QPushButton("Upload frames", self.centralwidget)
        self.frames_button.setGeometry(0, 100, 250, 41)
        self.frames_button.setObjectName("frames_button")
        self.frames_button.clicked.connect(self.upload_frames)
        self.frames_label = QLabel("Frames: ", self.centralwidget)
        self.frames_label.setGeometry(250, 100, 250, 40)
        self.frames_label.setObjectName("frames_label")

        # Segmentation method
        self.segmentation_method = QLabel("Choose segmentation method:", self.centralwidget)
        self.segmentation_method.setGeometry(30, 170, 201, 21)
        self.segmentation_method.setObjectName("segmentation_method")
        self.radio_oneshot = QRadioButton("one shot", self.centralwidget)
        self.radio_oneshot.setGeometry(30, 200, 82, 30)
        self.radio_oneshot.setObjectName("radio_oneshot")
        self.radio_oneshot.toggled.connect(self.radio_oneshot_clicked)
        self.radio_zeroshot = QRadioButton("zero shot", self.centralwidget)
        self.radio_zeroshot.setGeometry(30, 240, 82, 30)
        self.radio_zeroshot.setObjectName("radio_zeroshot")
        self.radio_zeroshot.toggled.connect(self.radio_zeroshot_clicked)

        # If one shot: upload initial mask
        self.init_mask_label = QLabel("Upload initial mask:", self.centralwidget)
        self.init_mask_label.setGeometry(30, 250, 300, 30)
        self.init_mask_label.setObjectName("init_mask_label")
        self.init_mask_label.hide()
        self.init_mask_button = QPushButton("Upload initial mask", self.centralwidget)
        self.init_mask_button.setGeometry(0, 280, 250, 41)
        self.init_mask_button.setObjectName("init_mask_button")
        self.init_mask_button.hide()
        self.init_mask_button.clicked.connect(self.upload_init_mask)
        self.mask_path_label = QLabel("Initial mask: ", self.centralwidget)
        self.mask_path_label.setWordWrap(True)
        self.mask_path_label.setGeometry(30, 330, 500, 41)
        self.mask_path_label.setObjectName("upload_model_label")
        self.mask_path_label.hide()

        # Run segmentation
        self.start_segmentation = QPushButton("Start segmentation", self.centralwidget)
        self.start_segmentation.setGeometry(350, 170, 250, 41)
        self.start_segmentation.setObjectName("start_segmentation")
        self.start_segmentation.setDisabled(True)

        # Visualisation
        self.visualisation = QPushButton("Visualisation", self.centralwidget)
        self.visualisation.setGeometry(350, 240, 250, 41)
        self.visualisation.setObjectName("visualisation")
        self.visualisation.clicked.connect(self.see_film)

        # Menu bar
        self.menubar = QMenuBar(RvosWindow)
        self.menubar.setGeometry(0, 0, 677, 21)
        self.menubar.setObjectName("menubar")

        # Menu help
        self.menuHelp = QMenu("Help", self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menubar.addAction(self.menuHelp.menuAction())
        RvosWindow.setMenuBar(self.menubar)

        RvosWindow.setCentralWidget(self.centralwidget)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    style = """
        QWidget{
            background: #262D37;
            color: #fff;
        }
        QLabel{
            font: 15px;
        }
        QPushButton
        {
            background: #0577a8;
            border: 1px #DADADA solid;
            padding: 5px 10px;
            border-radius: 15px;
            font-weight: bold;
            font-size: 9pt;
            outline: none;
            margin-left: auto;
            margin-right: auto;
        }
        QPushButton:hover{
            border: 1px #C6C6C6 solid;
            background: #0892D0;
        }
        QPushButton:disabled {
            background-color:#989898;
        }
        QLineEdit {
            padding: 1px;
            border-style: solid;
            border: 2px solid #fff;
            border-radius: 8px;
            font-size: 12pt;
        }
        QMenuBar {
            background-color: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                              stop:0 lightgray, stop:1 darkgray);
        }
        QMenuBar::item {
            spacing: 3px;           
            padding: 2px 10px;
            background-color: rgb(210,105,30);
            color: rgb(255,255,255);  
            border-radius: 5px;
        }
        QMenuBar::item:selected {    
            background-color: rgb(244,164,96);
        }
        QMenuBar::item:pressed {
            background: rgb(128,0,0);
        }
        QRadioButton {
            font: 15px;
        }
        QCheckBox {
            font: 15px;
        }
    """
    app.setStyleSheet(style)
    RvosWindow = QtWidgets.QMainWindow()
    ui = Ui_RvosWindow()
    ui.setupUi(RvosWindow)
    RvosWindow.show()
    sys.exit(app.exec_())
