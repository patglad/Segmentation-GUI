# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'yolact.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QIcon, QIntValidator
from PyQt5.QtWidgets import QPushButton, QLabel, QRadioButton, QMenuBar, QMenu, QCheckBox, QWidget, QFileDialog, \
    QMainWindow, QMessageBox, QLineEdit

from gui_utils import yolact_video_segmentation


class Ui_YolactWindow(QMainWindow):
    def see_film(self):
        os.system('python videowindow.py')

    def choose_model(self):
        model_path, _ = QFileDialog.getOpenFileName(self, 'Choose a model file', '', 'Model files | *.pth;')
        url = QUrl.fromLocalFile(model_path)
        print("Selected model: ", url.fileName())
        self.modelpath_label.setText('Model: ' + model_path)
        self.model = model_path
        return model_path

    def choose_video(self):
        video_path, _ = QFileDialog.getOpenFileName(self, 'Choose a video file', '', 'Video files | *.avi;')
        url = QUrl.fromLocalFile(video_path)
        print("Selected video: ", url.fileName())
        self.videopath_label.setText('Video: ' + video_path)
        self.video = video_path
        return video_path

    def choose_images(self):
        if self.checkBox.isChecked():
            image_path, _ = QFileDialog.getOpenFileName(self, 'Choose an image file', '', 'Image files | (*.jpg *.png);')
            url = QUrl.fromLocalFile(image_path)
            print("Selected image: ", url.fileName())
            self.imagepath_label.setText('Image: ' + image_path)
            self.image = image_path
            return image_path, _
        else:
            images_input_path = QFileDialog.getExistingDirectory(self, 'Choose an input folder')
            url_input = QUrl.fromLocalFile(images_input_path)
            print("Selected input images: ", url_input.fileName())
            images_output_path = QFileDialog.getExistingDirectory(self, 'Choose an input folder')
            url_output = QUrl.fromLocalFile(images_output_path)
            print("Selected output images: ", url_output.fileName())
            self.imagepath_label.setText("Image input path: " + images_input_path + "\n" +
                                         "Image output path: " + images_output_path + "\n")
            self.images_input_path = images_input_path
            self.images_output_path = images_output_path
            return images_input_path, images_output_path

    def start_segmentation(self):
        if self.video and self.model and self.score_threshold.text() and self.topk.text() and self.video_multiframe.text():
            score_threshold = float(self.score_threshold.text())
            topk = int(self.topk.text())
            video_multiframe = int(self.video_multiframe.text())
            print("Video segmentation")
            yolact_video_segmentation(self.video, self.model, score_threshold, topk, video_multiframe)
        else:
            QMessageBox.warning(self, 'Warning', 'Model or video file not specified', QMessageBox.Ok)

    def radio_images_clicked(self):
        print("Radio images")
        self.video_multiframe_label.hide()
        self.video_multiframe.hide()
        self.upload_video_button.hide()
        self.videopath_label.hide()

        self.checkBox.show()
        self.upload_images.show()
        self.imagepath_label.show()

    def radio_video_clicked(self):
        print("Radio video")
        self.checkBox.hide()
        self.upload_images.hide()
        self.imagepath_label.hide()

        self.video_multiframe_label.show()
        self.video_multiframe.show()
        self.upload_video_button.show()
        self.videopath_label.show()

    def setupUi(self, YolactWindow):
        self.model = ""
        self.video = ""
        self.image = ""
        self.images_input_path = ""
        self.images_output_path = ""

        YolactWindow.setObjectName("YolactWindow")
        YolactWindow.resize(600, 500)
        YolactWindow.setMinimumSize(600, 500)
        YolactWindow.setMaximumSize(600, 500)
        YolactWindow.setWindowTitle("YOLACT segmentation")
        YolactWindow.setWindowIcon(QIcon('ivf.png'))

        self.centralwidget = QWidget(YolactWindow)
        self.centralwidget.setObjectName("centralwidget")

        # 1. Upload model
        self.upload_model_label = QLabel("1. Upload model", self.centralwidget)
        self.upload_model_label.setGeometry(30, 20, 201, 21)
        self.upload_model_label.setObjectName("upload_model_label")

        self.upload_model_button = QPushButton("Upload model", self.centralwidget)
        self.upload_model_button.setGeometry(30, 50, 121, 41)
        self.upload_model_button.setObjectName("upload_model")
        self.upload_model_button.clicked.connect(self.choose_model)

        self.modelpath_label = QLabel("Model: ", self.centralwidget)
        self.modelpath_label.setWordWrap(True)
        self.modelpath_label.setGeometry(170, 50, 500, 41)
        self.modelpath_label.setObjectName("upload_model_label")

        self.score_threshold_label = QLabel("Score threshold:", self.centralwidget)
        self.score_threshold_label.setGeometry(30, 100, 91, 21)
        self.score_threshold_label.setObjectName("score_threshold_label")

        self.score_threshold = QLineEdit(self.centralwidget)
        self.score_threshold.setObjectName("score_threshold")
        self.score_threshold.setGeometry(150, 100, 91, 21)
        self.score_threshold.setValidator(QIntValidator())
        self.score_threshold.setText("0.15")

        self.topk_label = QLabel("Top k:", self.centralwidget)
        self.topk_label.setGeometry(30, 150, 91, 21)
        self.topk_label.setObjectName("topk_label")

        self.topk = QLineEdit(self.centralwidget)
        self.topk.setObjectName("topk")
        self.topk.setGeometry(150, 150, 91, 21)
        self.topk.setValidator(QIntValidator())
        self.topk.setText("15")

        # 2. Images or video
        self.images_or_video = QLabel("2. Images or video?", self.centralwidget)
        self.images_or_video.setGeometry(30, 200, 201, 21)
        self.images_or_video.setObjectName("images_or_video")


        # Images
        self.radio_images = QRadioButton("images", self.centralwidget)
        self.radio_images.setGeometry(40, 230, 82, 17)
        self.radio_images.setObjectName("radio_images")
        self.radio_images.toggled.connect(self.radio_images_clicked)

        self.radio_video = QRadioButton("video", self.centralwidget)
        self.radio_video.setGeometry(40, 260, 82, 17)
        self.radio_video.setObjectName("radio_video")
        self.radio_video.toggled.connect(self.radio_video_clicked)

        self.checkBox = QCheckBox("Single image", self.centralwidget)
        self.checkBox.setGeometry(30, 300, 91, 16)
        self.checkBox.setObjectName("checkBox")
        self.checkBox.hide()

        self.upload_images = QPushButton("Upload images", self.centralwidget)
        self.upload_images.setGeometry(30, 330, 101, 21)
        self.upload_images.setObjectName("upload_images")
        self.upload_images.clicked.connect(self.choose_images)
        self.upload_images.hide()

        self.imagepath_label = QLabel("Image(s): ", self.centralwidget)
        self.imagepath_label.setWordWrap(True)
        self.imagepath_label.setGeometry(150, 330, 101, 21)
        self.imagepath_label.setObjectName("imagepath_label")
        self.imagepath_label.hide()

        # Video

        self.video_multiframe_label = QLabel("Video multiframe:", self.centralwidget)
        self.video_multiframe_label.setGeometry(30, 300, 91, 16)
        self.video_multiframe_label.setObjectName("video_multiframe_label")
        self.video_multiframe_label.hide()

        self.video_multiframe = QLineEdit(self.centralwidget)
        self.video_multiframe.setObjectName("video_multiframe")
        self.video_multiframe.setGeometry(130, 300, 91, 21)
        self.video_multiframe.setValidator(QIntValidator())
        self.video_multiframe.setText("4")
        self.video_multiframe.hide()

        self.upload_video_button = QPushButton("Upload video", self.centralwidget)
        self.upload_video_button.setGeometry(30, 330, 101, 21)
        self.upload_video_button.setObjectName("upload_video")
        self.upload_video_button.clicked.connect(self.choose_video)
        self.upload_video_button.hide()

        self.videopath_label = QLabel("Video: ", self.centralwidget)
        self.videopath_label.setWordWrap(True)
        self.videopath_label.setGeometry(150, 330, 400, 60)
        self.videopath_label.setObjectName("videopath_label")
        self.videopath_label.hide()

        # Run segmentation
        self.segmentation = QPushButton("Start segmentation", self.centralwidget)
        self.segmentation.setGeometry(430, 150, 121, 41)
        self.segmentation.setObjectName("segmentation")
        self.segmentation.clicked.connect(self.start_segmentation)

        # Visualisation
        self.visualisation = QPushButton("Visualisation", self.centralwidget)
        self.visualisation.setGeometry(430, 220, 121, 41)
        self.visualisation.setObjectName("visualisation")
        self.visualisation.clicked.connect(self.see_film)

        # Menu bar
        self.menubar = QMenuBar(YolactWindow)
        self.menubar.setGeometry(0, 0, 711, 21)
        self.menubar.setObjectName("menubar")

        # Menu help
        self.menuHelp = QMenu("Help", self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menubar.addAction(self.menuHelp.menuAction())
        YolactWindow.setMenuBar(self.menubar)

        # Status bar
        # self.statusbar = QtWidgets.QStatusBar(YolactWindow)
        # self.YolactWindow.setObjectName("statusbar")
        # YolactWindow.setStatusBar(self.statusbar)

        YolactWindow.setCentralWidget(self.centralwidget)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    YolactWindow = QtWidgets.QMainWindow()
    ui = Ui_YolactWindow()
    ui.setupUi(YolactWindow)
    YolactWindow.show()
    sys.exit(app.exec_())
